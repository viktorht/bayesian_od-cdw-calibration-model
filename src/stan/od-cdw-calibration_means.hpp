
// Code generated by stanc v2.27.0
#include <stan/model/model_header.hpp>
namespace od_cdw_calibration_means_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 64> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 22, column 3 to column 29)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 23, column 3 to column 14)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 24, column 3 to column 23)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 28, column 3 to column 29)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 29, column 3 to column 35)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 50, column 3 to column 23)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 51, column 3 to column 23)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 53, column 6 to column 72)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 54, column 6 to column 89)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 52, column 22 to line 55, column 4)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 52, column 3 to line 55, column 4)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 33, column 4 to column 28)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 34, column 4 to column 26)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 35, column 4 to column 25)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 36, column 4 to column 27)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 41, column 6 to column 34)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 42, column 6 to column 34)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 40, column 18 to line 43, column 4)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 40, column 3 to line 43, column 4)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 5, column 3 to column 18)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 6, column 3 to column 24)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 7, column 3 to column 23)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 8, column 10 to column 11)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 8, column 3 to column 15)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 9, column 10 to column 11)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 9, column 3 to column 15)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 10, column 9 to column 16)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 10, column 3 to column 48)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 11, column 9 to column 15)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 11, column 3 to column 46)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 12, column 3 to column 35)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 16, column 3 to column 27)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 17, column 3 to column 29)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 18, column 3 to column 36)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 22, column 19 to column 20)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 28, column 19 to column 20)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 50, column 10 to column 16)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 51, column 10 to column 16)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 4, column 4, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 3, column 52, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 8, column 9, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 8, column 18, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 8, column 2, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 10, column 4, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 9, column 2, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 11, column 2, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 7, column 54, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 15, column 2, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 14, column 53, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 19, column 2, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 20, column 9, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 20, column 2, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 22, column 4, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 21, column 2, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 23, column 2, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 18, column 26, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 27, column 2, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 28, column 9, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 28, column 2, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 30, column 4, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 29, column 2, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 31, column 2, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)",
 " (in '/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/custom_functions.stan', line 26, column 24, included from\n'/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan/od-cdw-calibration_means.stan', line 2, column 0)"};


template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__,
T2__>, -1, 1>
standardise_vector(const T0__& v_arg__, const T1__& mu, const T2__& s,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__,
          T2__>;
  int current_statement__ = 0; 
  const auto& v = to_ref(v_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 39;
    return divide(subtract(v, mu), (2 * s));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct standardise_vector_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__,
T2__>, -1, 1>
operator()(const T0__& v, const T1__& mu, const T2__& s,
           std::ostream* pstream__)  const 
{
return standardise_vector(v, mu, s, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>>, -1, -1>
standardise_cols(const T0__& m_arg__, const T1__& mu_arg__,
                 const T2__& s_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>>;
  int current_statement__ = 0; 
  const auto& m = to_ref(m_arg__);
  const auto& mu = to_ref(mu_arg__);
  const auto& s = to_ref(s_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 41;
    validate_non_negative_index("out", "rows(m)", rows(m));
    current_statement__ = 42;
    validate_non_negative_index("out", "cols(m)", cols(m));
    Eigen::Matrix<local_scalar_t__, -1, -1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, -1>(rows(m), cols(m));
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 45;
    for (int c = 1; c <= cols(m); ++c) {
      current_statement__ = 44;
      assign(out,
        standardise_vector(rvalue(m, "m", index_omni(), index_uni(c)),
          rvalue(mu, "mu", index_uni(c)),
          rvalue(s, "s", index_uni(c)), pstream__),
        "assigning variable out", index_omni(), index_uni(c));
    }
    current_statement__ = 46;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct standardise_cols_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>>, -1, -1>
operator()(const T0__& m, const T1__& mu, const T2__& s,
           std::ostream* pstream__)  const 
{
return standardise_cols(m, mu, s, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__,
T2__>, -1, 1>
unstandardise_vector(const T0__& v_arg__, const T1__& m, const T2__& s,
                     std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__,
          T2__>;
  int current_statement__ = 0; 
  const auto& v = to_ref(v_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 48;
    return add(m, multiply(multiply(v, 2), s));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct unstandardise_vector_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__,
T2__>, -1, 1>
operator()(const T0__& v, const T1__& m, const T2__& s,
           std::ostream* pstream__)  const 
{
return unstandardise_vector(v, m, s, pstream__);
}
};

template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
col_means(const T0__& m_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  int current_statement__ = 0; 
  const auto& m = to_ref(m_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int C;
    C = std::numeric_limits<int>::min();
    
    current_statement__ = 50;
    C = cols(m);
    current_statement__ = 51;
    validate_non_negative_index("out", "C", C);
    Eigen::Matrix<local_scalar_t__, -1, 1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, 1>(C);
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 54;
    for (int c = 1; c <= C; ++c) {
      current_statement__ = 53;
      assign(out, mean(rvalue(m, "m", index_omni(), index_uni(c))),
        "assigning variable out", index_uni(c));
    }
    current_statement__ = 55;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct col_means_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
operator()(const T0__& m, std::ostream* pstream__)  const 
{
return col_means(m, pstream__);
}
};

template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
col_sds(const T0__& m_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  int current_statement__ = 0; 
  const auto& m = to_ref(m_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int C;
    C = std::numeric_limits<int>::min();
    
    current_statement__ = 57;
    C = cols(m);
    current_statement__ = 58;
    validate_non_negative_index("out", "C", C);
    Eigen::Matrix<local_scalar_t__, -1, 1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, 1>(C);
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 61;
    for (int c = 1; c <= C; ++c) {
      current_statement__ = 60;
      assign(out, sd(rvalue(m, "m", index_omni(), index_uni(c))),
        "assigning variable out", index_uni(c));
    }
    current_statement__ = 62;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct col_sds_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
operator()(const T0__& m, std::ostream* pstream__)  const 
{
return col_sds(m, pstream__);
}
};

class od_cdw_calibration_means_model final : public model_base_crtp<od_cdw_calibration_means_model> {

 private:
  int N;
  int N_train;
  int N_test;
  Eigen::Matrix<double, -1, 1> x__;
  Eigen::Matrix<double, -1, 1> y__;
  std::vector<int> ix_train;
  std::vector<int> ix_test;
  int likelihood;
  double sigma;
  double sigma_x;
  double sigma_y; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> x{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
 
 public:
  ~od_cdw_calibration_means_model() { }
  
  inline std::string model_name() const final { return "od_cdw_calibration_means_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.27.0", "stancflags = --warn-pedantic --include-paths=/Users/s143838/projects/bayesian-od-cdw-calibration-model/src/stan"};
  }
  
  
  od_cdw_calibration_means_model(stan::io::var_context& context__,
                                 unsigned int random_seed__ = 0,
                                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "od_cdw_calibration_means_model_namespace::od_cdw_calibration_means_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 20;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 20;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 20;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 21;
      context__.validate_dims("data initialization","N_train","int",
           std::vector<size_t>{});
      N_train = std::numeric_limits<int>::min();
      
      current_statement__ = 21;
      N_train = context__.vals_i("N_train")[(1 - 1)];
      current_statement__ = 21;
      check_greater_or_equal(function__, "N_train", N_train, 1);
      current_statement__ = 22;
      context__.validate_dims("data initialization","N_test","int",
           std::vector<size_t>{});
      N_test = std::numeric_limits<int>::min();
      
      current_statement__ = 22;
      N_test = context__.vals_i("N_test")[(1 - 1)];
      current_statement__ = 22;
      check_greater_or_equal(function__, "N_test", N_test, 1);
      current_statement__ = 23;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 24;
      context__.validate_dims("data initialization","x","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      x__ = Eigen::Matrix<double, -1, 1>(N);
      new (&x) Eigen::Map<Eigen::Matrix<double, -1, 1>>(x__.data(), N);
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 24;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 24;
        pos__ = 1;
        current_statement__ = 24;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 24;
          assign(x, x_flat__[(pos__ - 1)],
            "assigning variable x", index_uni(sym1__));
          current_statement__ = 24;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 25;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 26;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y__ = Eigen::Matrix<double, -1, 1>(N);
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y__.data(), N);
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 26;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 26;
        pos__ = 1;
        current_statement__ = 26;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 26;
          assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", index_uni(sym1__));
          current_statement__ = 26;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 27;
      validate_non_negative_index("ix_train", "N_train", N_train);
      current_statement__ = 28;
      context__.validate_dims("data initialization","ix_train","int",
           std::vector<size_t>{static_cast<size_t>(N_train)});
      ix_train = std::vector<int>(N_train, std::numeric_limits<int>::min());
      
      current_statement__ = 28;
      ix_train = context__.vals_i("ix_train");
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= N_train; ++sym1__) {
        current_statement__ = 28;
        check_greater_or_equal(function__, "ix_train[sym1__]",
                               ix_train[(sym1__ - 1)], 1);
      }
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= N_train; ++sym1__) {
        current_statement__ = 28;
        check_less_or_equal(function__, "ix_train[sym1__]",
                            ix_train[(sym1__ - 1)], N);
      }
      current_statement__ = 29;
      validate_non_negative_index("ix_test", "N_test", N_test);
      current_statement__ = 30;
      context__.validate_dims("data initialization","ix_test","int",
           std::vector<size_t>{static_cast<size_t>(N_test)});
      ix_test = std::vector<int>(N_test, std::numeric_limits<int>::min());
      
      current_statement__ = 30;
      ix_test = context__.vals_i("ix_test");
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        current_statement__ = 30;
        check_greater_or_equal(function__, "ix_test[sym1__]",
                               ix_test[(sym1__ - 1)], 1);
      }
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        current_statement__ = 30;
        check_less_or_equal(function__, "ix_test[sym1__]",
                            ix_test[(sym1__ - 1)], N);
      }
      current_statement__ = 31;
      context__.validate_dims("data initialization","likelihood","int",
           std::vector<size_t>{});
      likelihood = std::numeric_limits<int>::min();
      
      current_statement__ = 31;
      likelihood = context__.vals_i("likelihood")[(1 - 1)];
      current_statement__ = 31;
      check_greater_or_equal(function__, "likelihood", likelihood, 0);
      current_statement__ = 31;
      check_less_or_equal(function__, "likelihood", likelihood, 1);
      current_statement__ = 32;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 32;
      sigma = 1;
      current_statement__ = 33;
      sigma_x = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 33;
      sigma_x = 5;
      current_statement__ = 34;
      sigma_y = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 34;
      sigma_y = (0.77 / 2);
      current_statement__ = 32;
      check_greater_or_equal(function__, "sigma", sigma, 0);
      current_statement__ = 33;
      check_greater_or_equal(function__, "sigma_x", sigma_x, 0);
      current_statement__ = 34;
      check_greater_or_equal(function__, "sigma_y", sigma_y, 0);
      current_statement__ = 35;
      validate_non_negative_index("x_true", "N", N);
      current_statement__ = 36;
      validate_non_negative_index("y_true", "N", N);
      current_statement__ = 37;
      validate_non_negative_index("yrep", "N_test", N_test);
      current_statement__ = 38;
      validate_non_negative_index("llik", "N_test", N_test);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = N + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "od_cdw_calibration_means_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> x_true;
      x_true = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(x_true, DUMMY_VAR__);
      
      current_statement__ = 1;
      x_true = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                 0, lp__, N);
      local_scalar_t__ beta1;
      beta1 = DUMMY_VAR__;
      
      current_statement__ = 2;
      beta1 = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta2;
      beta2 = DUMMY_VAR__;
      
      current_statement__ = 3;
      beta2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_true;
      y_true = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(y_true, DUMMY_VAR__);
      
      current_statement__ = 5;
      assign(y_true, add(beta1, multiply(beta2, x_true)),
        "assigning variable y_true");
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 4;
        check_greater_or_equal(function__, "y_true[sym1__]",
                               y_true[(sym1__ - 1)], 0);
      }
      {
        current_statement__ = 12;
        lp_accum__.add(normal_lpdf<propto__>(x_true, 60, 60));
        current_statement__ = 13;
        lp_accum__.add(normal_lpdf<propto__>(y_true, 7, 7));
        current_statement__ = 14;
        lp_accum__.add(normal_lpdf<propto__>(beta1, 0, 1));
        current_statement__ = 15;
        lp_accum__.add(normal_lpdf<propto__>(beta2, 0.5, 1));
        current_statement__ = 19;
        if (likelihood) {
          current_statement__ = 16;
          lp_accum__.add(normal_lpdf<propto__>(x, x_true, sigma_x));
          current_statement__ = 17;
          lp_accum__.add(normal_lpdf<propto__>(y, y_true, sigma_y));
        } 
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "od_cdw_calibration_means_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> x_true;
      x_true = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(x_true, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      x_true = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                 0, lp__, N);
      double beta1;
      beta1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      beta1 = in__.template read<local_scalar_t__>();
      double beta2;
      beta2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      beta2 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<double, -1, 1> y_true;
      y_true = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(y_true, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(x_true[(sym1__ - 1)]);
      }
      vars__.emplace_back(beta1);
      vars__.emplace_back(beta2);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 5;
      assign(y_true, add(beta1, multiply(beta2, x_true)),
        "assigning variable y_true");
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 4;
        check_greater_or_equal(function__, "y_true[sym1__]",
                               y_true[(sym1__ - 1)], 0);
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(y_true[(sym1__ - 1)]);
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> yrep;
      yrep = Eigen::Matrix<double, -1, 1>(N_test);
      stan::math::fill(yrep, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> llik;
      llik = Eigen::Matrix<double, -1, 1>(N_test);
      stan::math::fill(llik, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      for (int n = 1; n <= N_test; ++n) {
        current_statement__ = 8;
        assign(yrep,
          normal_rng(
            (beta1 +
              (rvalue(x_true, "x_true",
                 index_uni(rvalue(ix_test, "ix_test", index_uni(n)))) *
                beta2)), sigma_y, base_rng__),
          "assigning variable yrep", index_uni(n));
        current_statement__ = 9;
        assign(llik,
          normal_lpdf<false>(
            rvalue(y, "y",
              index_uni(rvalue(ix_test, "ix_test", index_uni(n)))),
            (beta1 +
              (rvalue(x_true, "x_true",
                 index_uni(rvalue(ix_test, "ix_test", index_uni(n)))) *
                beta2)), sigma_y), "assigning variable llik", index_uni(n));
      }
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        vars__.emplace_back(yrep[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        vars__.emplace_back(llik[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> x_true;
      x_true = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(x_true, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_true_flat__;
        current_statement__ = 1;
        x_true_flat__ = context__.vals_r("x_true");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 1;
          assign(x_true, x_true_flat__[(pos__ - 1)],
            "assigning variable x_true", index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> x_true_free__;
      x_true_free__ = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(x_true_free__, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 1;
        assign(x_true_free__, stan::math::lb_free(x_true[(sym1__ - 1)], 0),
          "assigning variable x_true_free__", index_uni(sym1__));
      }
      double beta1;
      beta1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      beta1 = context__.vals_r("beta1")[(1 - 1)];
      double beta2;
      beta2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      beta2 = context__.vals_r("beta2")[(1 - 1)];
      double beta2_free__;
      beta2_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      beta2_free__ = stan::math::lb_free(beta2, 0);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(x_true_free__[(sym1__ - 1)]);
      }
      vars__.emplace_back(beta1);
      vars__.emplace_back(beta2_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"x_true", "beta1", "beta2", "y_true",
      "yrep", "llik"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(N)
                                                                   },
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N_test)},
      std::vector<size_t>{static_cast<size_t>(N_test)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x_true" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "beta1");
    param_names__.emplace_back(std::string() + "beta2");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_true" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yrep" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "llik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x_true" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "beta1");
    param_names__.emplace_back(std::string() + "beta2");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_true" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yrep" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "llik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"x_true\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"beta1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_true\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"yrep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_test) + "},\"block\":\"generated_quantities\"},{\"name\":\"llik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_test) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"x_true\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"beta1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_true\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"yrep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_test) + "},\"block\":\"generated_quantities\"},{\"name\":\"llik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_test) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = od_cdw_calibration_means_model_namespace::od_cdw_calibration_means_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return od_cdw_calibration_means_model_namespace::profiles__;
}

#endif


